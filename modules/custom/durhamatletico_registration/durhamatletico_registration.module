<?php

/**
 * @file
 * Contains durhamatletico_registration.module..
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Access\AccessResult;
use Drupal\node\Entity\Node;

/**
 * Implements hook_user_login().
 */
function durhamatletico_registration_user_login($account) {
  // Check if user hasn't created a registration node. If so, direct them to
  // register.
  $reg_node = \Drupal::service('durhamatletico_registration.registration')->getRegistrationNodeForUser($account);
  if (!count(reset($reg_node))) {
    $response = new RedirectResponse('/node/add/registration');
    $response->send();
  }
}

/**
 * {@inheritdoc}
 */
function durhamatletico_registration_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->getType() === 'registration') {
    // If needed, make sure team node is updated with entity reference to player.
    \Drupal::service('durhamatletico_registration.registration')->assignPlayerToTeam($entity);
    // Send mail.
    \Drupal::service('plugin.manager.mail')->mail('durhamatletico_registration', 'new_registration_admin', 'info@durhamatletico.com', \Drupal::languageManager()->getDefaultLanguage()->getId(), ['entity' => $entity]);
    $author = \Drupal\user\Entity\User::load($entity->getOwnerId());
    \Drupal::service('plugin.manager.mail')->mail('durhamatletico_registration', 'new_registration_user', $author->getEmail(), \Drupal::languageManager()->getDefaultLanguage()->getId(), ['entity' => $entity]);
  }
}

/**
 * {@inheritdoc}
 */
function durhamatletico_registration_node_update(Drupal\Core\Entity\EntityInterface $entity) {
  // If needed, make sure team node is updated with entity reference to player.
  if ($entity->getType() === 'registration') {
    \Drupal::service('durhamatletico_registration.registration')->assignPlayerToTeam($entity);
  }
}

/**
 * Implements hook_entity_field_access().
 */
function durhamatletico_registration_entity_field_access($operation, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, \Drupal\Core\Session\AccountInterface $account, \Drupal\Core\Field\FieldItemListInterface $items = NULL) {
  // Restrict access to some fields on registration.
  $admin_fields = [
    'field_admin_comments',
  ];
  if (in_array($field_definition->getName(), $admin_fields)) {
    // These are the fields we care about.
    if ($account->hasPermission('administer users')) {
      return AccessResult::allowed();
    }
    return AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_mail().
 */
function durhamatletico_registration_mail($key, &$message, $params) {
  switch ($key) {
    case 'new_registration_admin':
      $message['subject'] = 'New registration: ' . $params['entity']->getTitle();
      $message['body'][] = 'A new registration was received, please see https://www.durhamatletico.com/node/' . $params['entity']->id();
      break;

    case 'new_registration_user':
      $message['subject'] = 'Thank you for registering!';
      $author = \Drupal\user\Entity\User::load($params['entity']->getOwnerId());
      $markup = 'Dear ' . $author->getDisplayName() . ',' . "\n\n";
      $markup .= 'Thank you for registering for our futsal league! We are excited to have you join us. We will be in touch soon with more information as teams are formed and we put the schedule together. In the meantime, feel free to contact us at info@durhamatletico.com with any questions!' . "\n\n";
      $markup .= 'David & Kosta for Durham Atletico';
      $message['body'][] = $markup;
      break;
  }
}

/**
 * Implements hook_help().
 */
function durhamatletico_registration_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the durhamatletico_registration module.
    case 'help.page.durhamatletico_registration':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides registration functionality for Durham Atletico leagues.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function durhamatletico_registration_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_id == 'node_registration_form' || $form_id == 'node_registration_edit_form') {
    // If the user already created a registration, direct them back to theirs.
    $user = \Drupal\user\Entity\User::load(\Drupal::currentUser()->id());
    \Drupal::service('durhamatletico_registration.registration')->canCreateNewRegistration($user);

    // Registration admin roles.
    $reg_admin_roles = [
      'content_editor',
      'league_administrator',
      'administrator',
    ];
    $user_roles = \Drupal::currentUser()->getRoles(TRUE);
    if (count($user_roles)) {
      foreach ($user_roles as $role) {
        if (in_array($role, $reg_admin_roles)) {
          // Allow registration admins to view these fields.
          return;
        }
      }
    }

    $form['field_balance_due']['#access'] = FALSE;
    $form['field_registration_season']['#access'] = FALSE;
    // TODO: Rework this. @debt.
    // Hardcoded value to nid 1283, which corresponds to the spring season.
    $form['field_registration_season']['widget'][0]['target_id']['#default_value'] = Node::load(1283);
    unset($form['field_admin_comments']);
    unset($form['revision_information']);
    unset($form['revision_log']);
    $form['title']['#access'] = FALSE;
    // TODO: @debt.
    $form['title']['widget'][0]['value']['#default_value'] = \Drupal::currentUser()->getDisplayName() . ' - Spring 2016 registration';
  }
}

/**
 * Implements hook_node_access().
 */
function durhamatletico_registration_node_access(\Drupal\node\NodeInterface $node, $op, \Drupal\Core\Session\AccountInterface $account) {
  $type = $node->bundle();
  if ($type == 'registration') {
    return \Drupal::service('durhamatletico_registration.registration')->nodeAccessRegistration($node, $op, $account);
  }
  return \Drupal\Core\Access\AccessResult::neutral();
}

/**
 * Implements hook_theme().
 */
function durhamatletico_registration_theme() {
  $theme = [];

  return $theme;
}
