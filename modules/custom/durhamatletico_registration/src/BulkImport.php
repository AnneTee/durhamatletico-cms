<?php

namespace Drupal\durhamatletico_registration;

use Drupal\file\Entity\File;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;

/**
 * Class BulkImport.
 */
class BulkImport implements BulkImportInterface {

  private $file;
  private $parsedCsv;

  public function importUser($data) {
    // Look up existing user.
    list($firstName, $lastName) = explode(' ', $data->name);
    $firstName = $firstName . rand(0, 100000000000000);
    $result = \Drupal::entityQuery('user')
      ->condition('status', 1)
      ->condition('field_first_name', $firstName)
      ->condition('field_last_name', $lastName)
      ->execute();
    if (!count($result)) {
      // Create a new user.
      $values = [
        'field_first_name' => $firstName,
        'field_last_name' => $lastName,
      ];
      $user = User::create($values);
      $user->setUsername($firstName . $lastName);
      $user->enforceIsNew(TRUE);
      $user->save();
      $message = t('Created a new user account for @name', [
        '@name' => $firstName . ' ' . $lastName,
      ]);
      \Drupal::logger('durhamatletico_registration')->info($message);
      drupal_set_message($message);
    }
    else {
      $user = User::load(current($result));
      $message = t('Loaded existing account @account for @name',
        [
          '@account' => $user->getAccountName(),
          '@name' => $firstName . ' ' . $lastName,
        ]);
      \Drupal::logger('durhamatletico_registration')->info($message);
      drupal_set_message($message);
    }
    // TODO: Logic to handle people with the same name. For now, I don't think
    // we have this condition.
    $data->userUuid = $user->uuid();
    $data->userName = $user->getAccountName();
    $data->uid = $user->id();
    $this->importRegistration($data);
  }

  public function getSeasonNid($divisionNid) {
    $result = \Drupal::entityQuery('node')
      ->condition('type', 'season')
      ->condition('field_divisions', [$divisionNid], 'IN')
      ->condition('status', 1)
      ->execute();
    return current($result);
  }

  public function importRegistration($registration) {
    // Check to see if existing registrations exist for this person for
    // this team.
    $teamNid = $this->getTeamNid($registration->teamName, $registration->division);
    $divisionNid = $this->getDivisionNid($registration->division);
    $seasonNid = $this->getSeasonNid($divisionNid);
    $result = \Drupal::entityQuery('node')
      ->condition('field_registration_teams', $teamNid)
      ->condition('uuid', $registration->userUuid)
      ->execute();
    if (count($result)) {
      // Already a reg, don't do anything.
      $message = t('A registration already exists for @user on team @team', [
        '@user' => $registration->userName,
        '@team' => $registration->teamName,
      ]);
      \Drupal::logger('durhamatletico_registration')->warning($message);
      drupal_set_message($message, 'warning');
      return;
    }
    // Create a new registration.
    $values = [
      'type' => 'registration',
      'field_registration_teams' => $teamNid,
      'field_balance_due' => $registration->balanceDue,
      'field_registration_for' => $divisionNid,
      'field_registration_season' => $seasonNid,
      'field_registration_shirt_number' => 99,
      'field_admin_comments' => 'Generated by importer.',
    ];
    $registrationNode = Node::create($values);
    $registrationNode->setRevisionLogMessage('Generated by importer.');
    $user = User::load($registration->uid);
    $registrationNode->setOwner($user);
    $registrationNode->enforceIsNew();
    $registrationNode->save();
    $message = t('Created a new registration for user @user on team @team!',
      [
        '@user' => $user->getAccountName(),
        '@team' => $registration->teamName,
      ]
    );
    \Drupal::logger('durhamatletico_registration')->info($message);
    drupal_set_message($message);
  }

  public function getUserId($name) {
    // TODO: Implement getUserId() method.
  }

  public function getDivisionNid($division) {
    $result = \Drupal::entityQuery('node')
      ->condition('type', 'league')
      ->condition('title', $division, 'CONTAINS')
      ->execute();
    return current($result);
  }

  /**
   * {@inheritdoc}
   */
  public function __construct(File $file) {
    $this->file = $file;
  }

  public function validateCsv() {

    $data = $this->loadCsv();
    try {
      $this->checkIfCsv($data);
      $this->validateColumnHeaders();
    }
    catch (\Exception $e) {
      \Drupal::logger('durhamatletico_registration')->error($e->getMessage());
      drupal_set_message($e->getMessage(), 'error');
      return FALSE;
    }
    return TRUE;
  }

  public function loadCsv() {
    $file_uri = $this->file->getFileUri();
    return file_get_contents($file_uri);
  }

  public function import() {
    $data = $this->loadCsv();
    $this->checkIfCsv($data);
    // Iterate over all rows, except the header.
    array_shift($this->parsedCsv);
    foreach ($this->parsedCsv as $row) {
      $rowData = str_getcsv($row);
      $data = new \stdClass();
      $data->division = $rowData[0];
      $data->teamName = $rowData[1];
      $data->name = $rowData[2];
      $data->shirtNumber = $rowData[3];
      $data->balanceDue = $rowData[4];
      $data->isCaptain = $rowData[5];
      $this->importUser($data);
    }
  }

  public function getTeamNid($team_name, $division) {
    $divisionNid = $this->getDivisionNid($division);
    $divisionNode = Node::load($divisionNid);
    $divisionTeams = $divisionNode->get('field_teams')->referencedEntities();
    foreach ($divisionTeams as $team) {
      if (strpos($team->getTitle(), $team_name) !== FALSE) {
        return $team->id();
      }
    }
    // If we made it this far, we didn't find the team. Throw an error.
    throw new \Exception('No team found.');
  }

  public function checkIfCsv($data) {
    $this->parsedCsv = str_getcsv($data, "\n");
    if (!is_array($this->parsedCsv)) {
      throw new \Exception('Does not appear that data is in CSV format.');
    }
  }

  public function validateColumnHeaders() {
    $actualHeaders = current($this->parsedCsv);
    $expectedHeaders = 'Division,Team,Name,Shirt Number,Balance Due,Is Captain';
    if ($actualHeaders !== $expectedHeaders) {
      throw new \Exception('Did not find expected headers in CSV file.');
    }
  }

  public function checkRequiredFields() {
    // TODO:
  }

}
